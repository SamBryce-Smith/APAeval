"""Snakemake pipeline for [METHOD].
For help see: https://snakemake.readthedocs.io/en/stable/index.html.
"""

import pandas as pd
import sys

samples = pd.read_csv(os.path.abspath(
    config["samples"])).set_index("sample", drop=False)

# Check fastq2, if all empty then dataset is single end
if samples['fastq2'].isna().all():
    single_end = True
else:
    single_end = False

sys.stderr.write("No paths found in 'fastq2' column of sample table - assuming samples are single end\n")

assert isinstance(config["run_identification"], bool), f"'run_identification' must be True/False boolean, {config['run_identification']} (type {type(config['run_identification'])}) was provided"
assert isinstance(config["run_quantification"], bool), f"'run_quantification' must be True/False boolean, {config['run_quantification']} (type {type(config['run_quantification'])}) was provided"
assert isinstance(config["run_differential"], bool), f"'run_differential' must be True/False boolean, {config['run_differential']} (type {type(config['run_differential'])}) was provided"


def flag_info_message(flag_name, challenge_name):

    if config[flag_name]:
        sys.stderr.write(f"config['{flag_name}'] set to True - {challenge_name} challenge output to be generated\n")

    elif not config[flag_name]:
        sys.stderr.write(f"config['{flag_name}'] set to False - {challenge_name} challenge output will not be generated. Is this desired run mode?\n")


# # Info messages
flag_info_message("run_identification", "identification")
flag_info_message("run_quantification", "quantification")
flag_info_message("run_differential", "differential")

# Example code to enforce flags to False
# Use ONLY if a tool is incompatible with a given challenge
# Delete these lines if not applicable to your workflow

if config["run_identification"] is not False:
    raise ValueError("'run_identification' must be set to False as tool is incompatible with the identification challenge/does not perform this task (see README for details).")

if config["run_differential"] is not False:
    raise ValueError("'run_differential' must be set to False as tool is incompatible with the differential challenge/does not perform this task (see README for details).")


include: "rules/process_annotation.smk"
include: "rules/qapa_fasta.smk"
include: "rules/salmon.smk"
include: "rules/qapa_quant.smk"
include: "rules/make_challenge_outputs.smk"

#-------------------------------------------------------------------------------
localrules: finish

rule finish:
    """Rule that specifies the final output. Add all output files needed for the different challenges here. OUTCODE: 01 for identification challenge, 02 for quantification challenge, 03 for differential expression challenge. For more info refer to https://github.com/iRNA-COSI/APAeval/blob/main/execution_workflows/README.md
    """
    input:
        expand(os.path.join(config["out_dir"],
                            "challenge_outputs",
                     "_".join([config["param_code"],
                               config["method"],
                               "{sample}" + config["quantification_output_suffix"]
                               ]
                              )
                            ),
               sample=list(samples.index) if config["run_quantification"] else []
               ),
        expand(os.path.join(config["out_dir"],
                     "challenge_outputs", 
                     "_".join([config["param_code"],
                               config["method"],
                               "{sample}" + config["relative_quantification_output_suffix"]
                               ]
                              )
                    ),
                sample=list(samples.index) if config["run_quantification"] else [] 
                ),
        #os.path.join(config["out_dir"], "qapa_quant", "all_samples.pau_results.txt")
        #rules.qapa_quant_combined.output


#-------------------------------------------------------------------------------
# How did it go?
#-------------------------------------------------------------------------------
onsuccess:
    print("Workflow finished, no error")

onerror:
    print("An error occurred, check log at %s." % {log})
